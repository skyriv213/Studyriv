그래프

자료구조 중에 하나이다

정점(Node, Vertex)와 간선(Edge)로 만들어지며 간선은 노드간의 관계를 표현하는데 사용이 된다

G = (V,E)로 표현할 수 있다.

경로 : 한 노드에서 특정 노드로 이동하는 것
사이클 : 경로 중에서 시작과 도착이 같은것 (왕복)

단순 경로 / 단순 사이클 : 같은 노드를 두 번 이상 방문하지 않는다.
- 일반적으로 단순 경로 / 사이클을 구한다.

방향이 존재하는 그래프 : 특정 방향으로만 이동이 가능함
방향이 없는 그래프 :  어느 방향으로 가는 것이 정해지지않은 그래프

그래프 중에는 간선이 여러개인 그래프도 존재한다.

루프 : 시작점과 끝점이 같은 간선

가중치(weight) : 이동하는 거리 / 이동할 때 필요한 자원이 존재하는 그래프
- 가중치가 언급이 되어있지않다면 간선의 이동 자원은 1이라 생각하면 된다.

차수(degree) : 정점과 연결되어 있는 간선의 개수
- 방향이 있는 경우에는 나가는 간선(outdegree) / 들어오는 간선(indegree)의 개수를 따로 세어준다.

그래프의 표현 
정점 (V,N) : 보통 1 ~ V으로 차례때로 나타내기에 정점의 수로 저장
간선 (E,M) : 배열에 저장하는 것도 좋지만, 간선을 효율적으로 저장하는것이 좋다
 -> 찾고자 하는 노드와 연결이 된 간선을 효율적으로 찾을 수 있다...
 
 1. 인접행렬
 그래프의 정점의 개수를 v라고 하면 크기가 v*v인 2차원 배열을 이용하는 방식이다
 각 정점간의 간선이 존재하면 1로 표현을 하고 그와 다를때는 0으로 표현을 한다
 
 장점 : 구현이 쉽다
 단점 : 간선이 없는 노드간의 관계 (0)으로도 표현을 해야하기에 공간을 낭비하는 경우가 있다.
 		-그렇기에 자주 사용하지는 않는다
 		
 # 가중치가 있는 경우에는 가중치의 범위에 따라 간선이 없을때의 숫자를 결정하면 된다.
 
 2. 인접 리스트
 
A[i] = i와 연결된 정점이 linked list의 형태로 들어가있다

Ex )
A[1] = 2 5 
A[2] = 1
A[5] = 1

가중치가 있는 경우 (int, int)의 형식으로 저장을 해준다

그래프 탐색 

목적 : 모든 정점을 1번씩 방문 

DFS : 깊이 우선 탐색 -> 최대한 깊숙히 많이 가는 것
	- 스택을 사용한다
	- 스택을 사용해서 진행하며 방문할 수 있는 노드의 끝에 도달하면 이전 노드로 돌아온다

BFS : 너비 우선 탐색 -> 최대한 넓게 가는 것 
	- 큐 사용
	- 모든 가중치가 1일 경우, 최단거리를 찾는 알고리즘이 된다.
		


 